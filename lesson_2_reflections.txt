
#git init - initialize a repository
#git add - add files to staging area which are to be commited
#git status - check status of files in repository
staging area - an intermediate area before and after commiting files
working directory - present directory where files are stored
So
There is a layer between working directory and local repository. It is called staging area. When you add your changed files using 'git add', the changes first gets stored in staging area for checking. Then you can use 'git commit' to further push your changes from staging area to local repo.

#git diff - see differences in working directory files and staging area files
#git diff --staged - see differences in staging area files and current repository commited HEAD files
#git reset --hard - reset all changes in staging area and working directory when the changes are not required.
#git checkout master - to fix the head to most recent commits

Branches
#git branch - shows different branches in your project
#git branch name_branch  - creates new branch which is named as name_branch
 Branches can be helpful in doing experimental changes to codes, or adding new languages to present code.
Master branch can be thought of as a production branch which is the correct branch and all other branches are experimental branches. We can merge these experimental branches to the Master when we find the experiments are working fine and are needed to be added to the production.
Viewing the commit history

the visual representation of the commit history is #git log --graph --oneline branch1 branch2.
How do the diagrams help you visualize the branch structure?
	diagrams helps to visualize branches and which branch can be reached and which can't be. It helps to idetify which branch has parents and which are master.

#git gc - run git garbeg collection

MERGING

#git merge branch1(master) branch2
The above command merges 2 branches using the original commit from where these branches have been originated.

#git show commitID 
This command shows the changes made in the commit compared to its parent branch.
 
#git branch -d branch
delete a branch

A Note about #git merge

#git merge will also include the currently checked-out branch in the merged version. So if you have branch1 checked out, and you run git merge branch2 branch3, the merged version will combine branch1 as well as branch2 and branch3. That’s because the branch1 label will update after you make the merge commit, so it’s unlikely that you didn’t want the changes from branch1 included in the merge. For this reason, you should always checkout one of the two branches you’re planning on merging before doing the merge. Which one you should check out depends on which branch label you want to point to the new commit.

Since the checked-out branch is always included in the merge, you may have guessed that when you are merging two branches, you don't need to specify both of them as arguments to #git merge on the command line. If you want to merge branch2 into branch1, you can simply #git checkout branch1 and then type #git merge branch2. The only reason to type #git merge branch1 branch2 is if it helps you keep better mental track of which branches you are merging.

Also, since the two branches are merged, the order in which they are typed into the command line does not matter. The key is to remember that #git merge always merges all the specified branches into the currently checked out branch, creating a new commit for that branch.

Restore your files to their state before you started the merge by running #git merge --abort.
 
