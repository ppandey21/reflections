
#git init - initialize a repository
#git add - add files to staging area which are to be commited
#git status - check status of files in repository
staging area - an intermediate area before and after commiting files
working directory - present directory where files are stored
So
There is a layer between working directory and local repository. It is called staging area. When you add your changed files using 'git add', the changes first gets stored in staging area for checking. Then you can use 'git commit' to further push your changes from staging area to local repo.

#git diff - see differences in working directory files and staging area files
#git diff --staged - see differences in staging area files and current repository commited HEAD files
#git reset --hard - reset all changes in staging area and working directory when the changes are not required.
#git checkout master - to fix the head to most recent commits

Branches
#git branch - shows different branches in your project
#git branch name_branch  - creates new branch which is named as name_branch
 Branches can be helpful in doing experimental changes to codes, or adding new languages to present code.
Master branch can be thought of as a production branch which is the correct branch and all other branches are experimental branches. We can merge these experimental branches to the Master when we find the experiments are working fine and are needed to be added to the production.
Viewing the commit history

the visual representation of the commit history is #git log --graph --oneline branch1 branch2.
How do the diagrams help you visualize the branch structure?
	diagrams helps to visualize branches and which branch can be reached and which can't be. It helps to idetify which branch has parents and which are master.

#git gc - run git garbeg collection

MERGING

#git merge branch1(master) branch2
The above command merges 2 branches using the original commit from where these branches have been originated.

#git show commitID 
This command shows the changes made in the commit compared to its parent branch.
 
#git branch -d branch
delete a branch

A Note about #git merge

#git merge will also include the currently checked-out branch in the merged version. So if you have branch1 checked out, and you run git merge branch2 branch3, the merged version will combine branch1 as well as branch2 and branch3. That’s because the branch1 label will update after you make the merge commit, so it’s unlikely that you didn’t want the changes from branch1 included in the merge. For this reason, you should always checkout one of the two branches you’re planning on merging before doing the merge. Which one you should check out depends on which branch label you want to point to the new commit.

Since the checked-out branch is always included in the merge, you may have guessed that when you are merging two branches, you don't need to specify both of them as arguments to #git merge on the command line. If you want to merge branch2 into branch1, you can simply #git checkout branch1 and then type #git merge branch2. The only reason to type #git merge branch1 branch2 is if it helps you keep better mental track of which branches you are merging.

Also, since the two branches are merged, the order in which they are typed into the command line does not matter. The key is to remember that #git merge always merges all the specified branches into the currently checked out branch, creating a new commit for that branch.

Restore your files to their state before you started the merge by running #git merge --abort.

What happens when you create a repository?  Why do you need to do it?

    When I create a repository, Git creates a directory vhere it will keep track
    of all the versions that I save.  Creating the repository also lets Git know
    that I want all the files in this directory to be tracked together, but
    separately from files in different directories.  If I didn't create the
    repository, Git could create the directory to save the versions in
    automatically, but it wouldn't know which files I wanted to track together
    and which I wanted to track separately.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

    The staging area is an intermediate area where I can add changes before
    committing them to the repository.  This allows me to add changes to the
    staging area one-by-one, then commit them all at once, which makes it easier
    to specify what changes should go into each commit.  That makes the commits
    more valuable, since the commit history is easier to navigate when I create
    one commit per logical change.

How can you use the staging area to make sure you have one commit per logical
change?

    If I've made more than one logical change since committing, I can add all
    the changes affected by the first logical change to the staging area, then
    commit those without committing the others.

When would you want to create a new branch, and when would you not?

    I like to use master as a stable version of my code and create a new branch
    when I'm planning on working on something experimental, or that will be
    non-stable for a little while.  That makes it easier to switch back to the
    stable version whenever I need to.  This is particularly helpful when I am
    working with other developers, since the other developers can trust that
    master is stable.  They can always check out my branch if they are
    interested in my experimental changes.

    When I'm working on my own, and I make a change that I do not expect to
    break anything, I frequently don't bother to make another branch.  However,
    making a new branch in Git is so fast and easy that there is really no bad
    time to make a branch, unless I make so many that I cannot keep track of
    them all.

How do the diagrams help you visualize these changes?

    The diagrams show what the parent of each commit is.  When there are
    multiple branches, I can use the diagrams to easily see what changes will be
    part of each branch.  They also let me easily see what commit each branch
    refers to.

What is the result of merging two branches together?  Why do we represent it in
the diagram the way we do?

    The result of merging two branches together is a combined commit with all
    the changes from both branches.  We represent the merge in the diagram as
    having two parents - the two commits that it combined.  For non-merge
    commits, the parent of the commit is the state of the files before that
    commit was made.  For merge commits, there was no one state of the files
    before the commit was made, since the merge commit combines two commits
    together, so it makes sense for the merge commit to have two parents.

What are the pros and cons of Git’s automatic merging vs. always doing merges
manually?

    Git's automatic merging can save the user a lot of time!  Especially when
    multiple people are working together, merging everything manually could be
    very painful.

    The downside of automatic merging is that it's not perfect.  Merging the
    coins branch with the master branch, which included color, resulted in
    inconsistent visuals, where most items were colored but the coins were not.
    Git could even make worse mistakes - for example, if one branch deleted a
    function, and another branch added a call to that function, Git would merge
    those together with no conflict and the resulting code would be broken.

    Overall, Git's merging can save a lot of time, but it's important to always
    double check that the code still works after doing a merge. 
